difference between size,length and length()

size() Method

Applicable to collections like ArrayList, HashSet, HashMap, etc.
Returns the number of elements in the collection.
Example: list.size().

import java.util.ArrayList;

public class SizeExample {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Apple");
        list.add("Banana");
        list.add("Cherry");

        System.out.println("Size of the list: " + list.size()); // Output: 3
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------

length Field

Applicable to arrays.
Returns the number of elements an array can hold.
Example: array.length.

public class LengthExample {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5};

        System.out.println("Length of the array: " + array.length); // Output: 5
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------

length() Method

Applicable to String objects.
Returns the number of characters in the string.
Example: str.length().

public class LengthMethodExample {
    public static void main(String[] args) {
        String str = "Hello, world!";

        System.out.println("Length of the string: " + str.length()); // Output: 13
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------

differnce between iterator and listiterator

Traversal Direction:

Iterator: Only supports forward traversal.
ListIterator: Supports both forward and backward traversal.
--------------------------------------------------------------------------------
Applicable Collections:

Iterator: Can be used with any collection that implements the Collection interface.
ListIterator: Can only be used with lists (List interface).
----------------------------------------------------------------------------------------------
Modification Capabilities:

Iterator: Allows element removal during iteration.
ListIterator: Allows element removal, addition, and modification during iteration.


example of iterator

import java.util.ArrayList;
import java.util.Iterator;

public class IteratorExample {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Apple");
        list.add("Banana");
        list.add("Cherry");

        Iterator<String> iterator = list.iterator();
        while (iterator.hasNext()) {
            String fruit = iterator.next();
            System.out.println(fruit);
            if (fruit.equals("Banana")) {
                iterator.remove();
            }
        }

        System.out.println("List after iteration: " + list);
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
example of listiterator

import java.util.ArrayList;
import java.util.ListIterator;

public class ListIteratorExample {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Apple");
        list.add("Banana");
        list.add("Cherry");

        ListIterator<String> listIterator = list.listIterator();

        // Forward traversal
        System.out.println("Forward traversal:");
        while (listIterator.hasNext()) {
            String fruit = listIterator.next();
            System.out.println(fruit);
            if (fruit.equals("Banana")) {
                listIterator.set("Blueberry"); // Modify element
            }
        }

        // Backward traversal
        System.out.println("\nBackward traversal:");
        while (listIterator.hasPrevious()) {
            String fruit = listIterator.previous();
            System.out.println(fruit);
            if (fruit.equals("Cherry")) {
                listIterator.add("Date"); // Add element
            }
        }

        System.out.println("\nList after iteration: " + list);
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------
 # difference between Integer and int

Type:

int: Primitive data type.
Integer: Wrapper class.
--------------------------------------------------------------------------------------------------------------------
Nullability:

int: Cannot be null.
Integer: Can be null
------------------------------------------------------------------------------------------------------------------
Usage in Collections:

int: Cannot be used directly in collections.
Integer: Can be used in collections, such as ArrayList<Integer>.
----------------------------------------------------------------------------------------------------------------------
Memory:

int: Requires less memory.
Integer: Requires more memory due to object overhead.
---------------------------------------------------------------------------------------------------------------------
Methods and Operations:

int: Does not have methods.
Integer: Has methods like compareTo(), intValue(), valueOf(), etc.
-----------------------------------------------------------------------------------------------------------------------
Default Value:

int: Defaults to 0 (for instance variables).
Integer: Defaults to null (for reference variables).
---------------------------------------------------------------------------------------------------------------------------------------------------------------
Difference between class and Object

Classes is a blueprint of an object and classes are used to create an object.
they are logical entity.
they are a group of similar objects.
they do not occupy memory.
a class can only be declared once
example -  cars

Objects are the instance of a variable.
they are physical entity.
they are  a real-world entitiy.
they can be created as much times as we require.
they occupy memory as soon as the object is created.
example - mercedes,BMW
----------------------------------------------------------------------------------------------------------------------------------------------------------
####there are three type of classes-local,instance and static
Difference between Instance class and Static class

Instance variables are declared in a class,but outside a method,constructor or any block
Instance variables are created when a object is created and get destored then the object is destroyed
Instance variable should be called with ObjectReference.VariableName

Static variables are declared with using static keyword
Static variables are created when the program is started and destored when the program stops
static variable can be accessed by calling with the class name ClassName.VariableName
--------------------------------------------------------------------------------------------------------------------
difference between private and protected
private- private access modifier resticts the visiblility to the class itself
they cannot be inherited or accessed by subclasses

protected-protected access modifer allows visibility within the package
this allows subclasses to access and override these members.
-------------------------------------------------------------------------------------------------------------------------------
